# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.courses import Courses  # noqa: F401,E501
from swagger_server.models.teachers import Teachers  # noqa: F401,E501
from swagger_server import util


class Classes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, class_id: int=None, name: str=None, start_date: datetime=None, end_date: datetime=None, course_id: Courses=None, teacher_id: Teachers=None, status: str=None):  # noqa: E501
        """Classes - a model defined in Swagger

        :param class_id: The class_id of this Classes.  # noqa: E501
        :type class_id: int
        :param name: The name of this Classes.  # noqa: E501
        :type name: str
        :param start_date: The start_date of this Classes.  # noqa: E501
        :type start_date: datetime
        :param end_date: The end_date of this Classes.  # noqa: E501
        :type end_date: datetime
        :param course_id: The course_id of this Classes.  # noqa: E501
        :type course_id: Courses
        :param teacher_id: The teacher_id of this Classes.  # noqa: E501
        :type teacher_id: Teachers
        :param status: The status of this Classes.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'class_id': int,
            'name': str,
            'start_date': datetime,
            'end_date': datetime,
            'course_id': Courses,
            'teacher_id': Teachers,
            'status': str
        }

        self.attribute_map = {
            'class_id': 'class_id',
            'name': 'name',
            'start_date': 'start_date',
            'end_date': 'end_date',
            'course_id': 'course_id',
            'teacher_id': 'teacher_id',
            'status': 'status'
        }
        self._class_id = class_id
        self._name = name
        self._start_date = start_date
        self._end_date = end_date
        self._course_id = course_id
        self._teacher_id = teacher_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Classes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The classes of this Classes.  # noqa: E501
        :rtype: Classes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def class_id(self) -> int:
        """Gets the class_id of this Classes.


        :return: The class_id of this Classes.
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id: int):
        """Sets the class_id of this Classes.


        :param class_id: The class_id of this Classes.
        :type class_id: int
        """

        self._class_id = class_id

    @property
    def name(self) -> str:
        """Gets the name of this Classes.


        :return: The name of this Classes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Classes.


        :param name: The name of this Classes.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this Classes.


        :return: The start_date of this Classes.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this Classes.


        :param start_date: The start_date of this Classes.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this Classes.


        :return: The end_date of this Classes.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this Classes.


        :param end_date: The end_date of this Classes.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def course_id(self) -> Courses:
        """Gets the course_id of this Classes.


        :return: The course_id of this Classes.
        :rtype: Courses
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id: Courses):
        """Sets the course_id of this Classes.


        :param course_id: The course_id of this Classes.
        :type course_id: Courses
        """
        if course_id is None:
            raise ValueError("Invalid value for `course_id`, must not be `None`")  # noqa: E501

        self._course_id = course_id

    @property
    def teacher_id(self) -> Teachers:
        """Gets the teacher_id of this Classes.


        :return: The teacher_id of this Classes.
        :rtype: Teachers
        """
        return self._teacher_id

    @teacher_id.setter
    def teacher_id(self, teacher_id: Teachers):
        """Sets the teacher_id of this Classes.


        :param teacher_id: The teacher_id of this Classes.
        :type teacher_id: Teachers
        """
        if teacher_id is None:
            raise ValueError("Invalid value for `teacher_id`, must not be `None`")  # noqa: E501

        self._teacher_id = teacher_id

    @property
    def status(self) -> str:
        """Gets the status of this Classes.


        :return: The status of this Classes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Classes.


        :param status: The status of this Classes.
        :type status: str
        """

        self._status = status
