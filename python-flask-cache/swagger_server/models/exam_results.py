# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.classes import Classes  # noqa: F401,E501
from swagger_server.models.exams import Exams  # noqa: F401,E501
from swagger_server.models.students import Students  # noqa: F401,E501
from swagger_server import util


class ExamResults(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, student: Students=None, exam: Exams=None, score: int=None, result_date: datetime=None, _class: Classes=None, note: str=None):  # noqa: E501
        """ExamResults - a model defined in Swagger

        :param id: The id of this ExamResults.  # noqa: E501
        :type id: int
        :param student: The student of this ExamResults.  # noqa: E501
        :type student: Students
        :param exam: The exam of this ExamResults.  # noqa: E501
        :type exam: Exams
        :param score: The score of this ExamResults.  # noqa: E501
        :type score: int
        :param result_date: The result_date of this ExamResults.  # noqa: E501
        :type result_date: datetime
        :param _class: The _class of this ExamResults.  # noqa: E501
        :type _class: Classes
        :param note: The note of this ExamResults.  # noqa: E501
        :type note: str
        """
        self.swagger_types = {
            'id': int,
            'student': Students,
            'exam': Exams,
            'score': int,
            'result_date': datetime,
            '_class': Classes,
            'note': str
        }

        self.attribute_map = {
            'id': 'id',
            'student': 'student',
            'exam': 'exam',
            'score': 'score',
            'result_date': 'result_date',
            '_class': 'class',
            'note': 'note'
        }
        self._id = id
        self._student = student
        self._exam = exam
        self._score = score
        self._result_date = result_date
        self.__class = _class
        self._note = note

    @classmethod
    def from_dict(cls, dikt) -> 'ExamResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The exam_results of this ExamResults.  # noqa: E501
        :rtype: ExamResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ExamResults.


        :return: The id of this ExamResults.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ExamResults.


        :param id: The id of this ExamResults.
        :type id: int
        """

        self._id = id

    @property
    def student(self) -> Students:
        """Gets the student of this ExamResults.


        :return: The student of this ExamResults.
        :rtype: Students
        """
        return self._student

    @student.setter
    def student(self, student: Students):
        """Sets the student of this ExamResults.


        :param student: The student of this ExamResults.
        :type student: Students
        """
        if student is None:
            raise ValueError("Invalid value for `student`, must not be `None`")  # noqa: E501

        self._student = student

    @property
    def exam(self) -> Exams:
        """Gets the exam of this ExamResults.


        :return: The exam of this ExamResults.
        :rtype: Exams
        """
        return self._exam

    @exam.setter
    def exam(self, exam: Exams):
        """Sets the exam of this ExamResults.


        :param exam: The exam of this ExamResults.
        :type exam: Exams
        """
        if exam is None:
            raise ValueError("Invalid value for `exam`, must not be `None`")  # noqa: E501

        self._exam = exam

    @property
    def score(self) -> int:
        """Gets the score of this ExamResults.


        :return: The score of this ExamResults.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score: int):
        """Sets the score of this ExamResults.


        :param score: The score of this ExamResults.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def result_date(self) -> datetime:
        """Gets the result_date of this ExamResults.


        :return: The result_date of this ExamResults.
        :rtype: datetime
        """
        return self._result_date

    @result_date.setter
    def result_date(self, result_date: datetime):
        """Sets the result_date of this ExamResults.


        :param result_date: The result_date of this ExamResults.
        :type result_date: datetime
        """

        self._result_date = result_date

    @property
    def _class(self) -> Classes:
        """Gets the _class of this ExamResults.


        :return: The _class of this ExamResults.
        :rtype: Classes
        """
        return self.__class

    @_class.setter
    def _class(self, _class: Classes):
        """Sets the _class of this ExamResults.


        :param _class: The _class of this ExamResults.
        :type _class: Classes
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")  # noqa: E501

        self.__class = _class

    @property
    def note(self) -> str:
        """Gets the note of this ExamResults.


        :return: The note of this ExamResults.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note: str):
        """Sets the note of this ExamResults.


        :param note: The note of this ExamResults.
        :type note: str
        """

        self._note = note
