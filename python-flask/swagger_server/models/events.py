# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.classes import Classes  # noqa: F401,E501
from swagger_server import util


class Events(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, _class: Classes=None, create_date: datetime=None, status: str=None, happen_date: datetime=None):  # noqa: E501
        """Events - a model defined in Swagger

        :param id: The id of this Events.  # noqa: E501
        :type id: int
        :param name: The name of this Events.  # noqa: E501
        :type name: str
        :param _class: The _class of this Events.  # noqa: E501
        :type _class: Classes
        :param create_date: The create_date of this Events.  # noqa: E501
        :type create_date: datetime
        :param status: The status of this Events.  # noqa: E501
        :type status: str
        :param happen_date: The happen_date of this Events.  # noqa: E501
        :type happen_date: datetime
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            '_class': Classes,
            'create_date': datetime,
            'status': str,
            'happen_date': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            '_class': 'class',
            'create_date': 'create_date',
            'status': 'status',
            'happen_date': 'happen_date'
        }
        self._id = id
        self._name = name
        self.__class = _class
        self._create_date = create_date
        self._status = status
        self._happen_date = happen_date

    @classmethod
    def from_dict(cls, dikt) -> 'Events':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The events of this Events.  # noqa: E501
        :rtype: Events
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Events.


        :return: The id of this Events.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Events.


        :param id: The id of this Events.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Events.


        :return: The name of this Events.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Events.


        :param name: The name of this Events.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def _class(self) -> Classes:
        """Gets the _class of this Events.


        :return: The _class of this Events.
        :rtype: Classes
        """
        return self.__class

    @_class.setter
    def _class(self, _class: Classes):
        """Sets the _class of this Events.


        :param _class: The _class of this Events.
        :type _class: Classes
        """
        if _class is None:
            raise ValueError("Invalid value for `_class`, must not be `None`")  # noqa: E501

        self.__class = _class

    @property
    def create_date(self) -> datetime:
        """Gets the create_date of this Events.


        :return: The create_date of this Events.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date: datetime):
        """Sets the create_date of this Events.


        :param create_date: The create_date of this Events.
        :type create_date: datetime
        """

        self._create_date = create_date

    @property
    def status(self) -> str:
        """Gets the status of this Events.


        :return: The status of this Events.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Events.


        :param status: The status of this Events.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def happen_date(self) -> datetime:
        """Gets the happen_date of this Events.


        :return: The happen_date of this Events.
        :rtype: datetime
        """
        return self._happen_date

    @happen_date.setter
    def happen_date(self, happen_date: datetime):
        """Sets the happen_date of this Events.


        :param happen_date: The happen_date of this Events.
        :type happen_date: datetime
        """

        self._happen_date = happen_date
