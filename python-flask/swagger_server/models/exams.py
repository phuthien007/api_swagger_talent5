# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.courses import Courses  # noqa: F401,E501
from swagger_server import util


class Exams(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, course: Courses=None):  # noqa: E501
        """Exams - a model defined in Swagger

        :param exam_id: The exam_id of this Exams.  # noqa: E501
        :type exam_id: int
        :param name: The name of this Exams.  # noqa: E501
        :type name: str
        :param course: The course of this Exams.  # noqa: E501
        :type course: Courses
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'course': Courses
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'course': 'course'
        }
        self._id = id
        self._name = name
        self._course = course

    @classmethod
    def from_dict(cls, dikt) -> 'Exams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The exams of this Exams.  # noqa: E501
        :rtype: Exams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the exam_id of this Exams.


        :return: The exam_id of this Exams.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the exam_id of this Exams.


        :param exam_id: The exam_id of this Exams.
        :type exam_id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Exams.


        :return: The name of this Exams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Exams.


        :param name: The name of this Exams.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def course(self) -> Courses:
        """Gets the course of this Exams.


        :return: The course of this Exams.
        :rtype: Courses
        """
        return self._course

    @course.setter
    def course(self, course: Courses):
        """Sets the course of this Exams.


        :param course: The course of this Exams.
        :type course: Courses
        """
        if course is None:
            raise ValueError("Invalid value for `course`, must not be `None`")  # noqa: E501

        self._course = course
